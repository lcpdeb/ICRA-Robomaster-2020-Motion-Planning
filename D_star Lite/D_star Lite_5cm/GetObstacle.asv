function obstacle=GetObstacle()
global accuracy;
obstacle=[];
%%%%
for i=4:1:11
    obstacle=[obstacle;
        i,11];
end
for i=4:1:11
    obstacle=[obstacle;
        11,i];
end
%%%%
for i=floor(0*10/accuracy)+1:1:ceil(10*10/accuracy)+1
    for j=floor(38.5*10/accuracy)+1:1:ceil(41*10/accuracy)+1
        obstacle=[obstacle;
            i,j];
    end
end
for i=floor(15*10/accuracy)+1:1:ceil(17.5*10/accuracy)+1
    for j=floor(0*10/accuracy)+1:1:ceil(10*10/accuracy)+1
        obstacle=[obstacle;
            i,j];
    end
end
for i=floor(15*10/accuracy)+1:1:ceil(23*10/accuracy)+1
    for j=floor(24.25*10/accuracy)+1:1:ceil((24.25+2.5)*10/accuracy)+1
        obstacle=[obstacle;
            i,j];
    end
end
for i=floor(35*10/accuracy)+1:1:ceil(45*10/accuracy)+1
    for j=floor(38.5*10/accuracy)+1:1:ceil(41*10/accuracy)+1
        obstacle=[obstacle;
            i,j];
    end
end
for i=floor(36*10/accuracy)+1:1:ceil(46*10/accuracy)+1
    for j=floor(10*10/accuracy)+1:1:ceil(12.5*10/accuracy)+1
        obstacle=[obstacle;
            i,j];
    end
end
%%% center obstacle
for k=floor(3*sqrt(2)/2):1:ceil(3*sqrt(2)/2)
    for floor((40.5-3*sqrt(2)/2)*10/accuracy)+k+1:1:ceil((40.5+3*sqrt(2)/2)*10/accuracy)-k+1
    end
end
for i=77:1:87
    obstacle=[obstacle
          i,25.5*10/accuracy+0+1];
end
for i=78:1:86
        obstacle=[obstacle
          i,25.5*10/accuracy+1+1];
end
for i=79:1:85
        obstacle=[obstacle
          i,25.5*10/accuracy+2+1];
end
for i=80:1:84
        obstacle=[obstacle
          i,25.5*10/accuracy+3+1];
end
for i=81:1:83
        obstacle=[obstacle
          i,25.5*10/accuracy+4+1];
end
for i=82:1:82
        obstacle=[obstacle
          i,25.5*10/accuracy+5+1];
end
%%% center obstacle
for i=floor(58*10/accuracy)+1:1:ceil(66*10/accuracy)+1
    for j=floor(24.25*10/accuracy)+1:1:ceil((24.25+2.5)*10/accuracy)+1
        obstacle=[obstacle;
            i,j];
    end
end
for i=floor(71*10/accuracy)+1:1:ceil(81*10/accuracy)+1
    for j=floor(10*10/accuracy)+1:1:ceil(12.5*10/accuracy)+1
        obstacle=[obstacle;
            i,j];
    end
end
for i=floor(63.5*10/accuracy)+1:1:ceil(66*10/accuracy)+1
    for j=floor(41*10/accuracy)+1:1:ceil(51*10/accuracy)+1
        obstacle=[obstacle;
            i,j];
    end
end
end